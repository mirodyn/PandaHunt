@page "/puzzleB"
@using System.Reflection;
@inject PuzzleTimers timers
@inject IJSRuntime JSRuntime



@if (timers.PuzzleBOpened)
{

    <div class="opened">
        @if (Solved)
        {
            <div class="solved">
                <svg class="checkmark" viewBox="0 0 24 24"><path d="M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm4.393 7.5l-5.643 5.784-2.644-2.506-1.856 1.858 4.5 4.364 7.5-7.643-1.857-1.857z" /></svg>
                <br />
                <span>Správně!</span>
                <br />
                <button class="btn btn-primary" @onclick="DownloadPuzzle">Stáhnout dílek</button>
            </div>
        }
        else
        {
            <div class="container">
                <h1>大同市</h1>
                <svg width="200px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M20.56 3.91C21.15 4.5 21.15 5.45 20.56 6.03L16.67 9.92L18.79 19.11L17.38 20.53L13.5 13.1L9.6 17L9.96 19.47L8.89 20.53L7.13 17.35L3.94 15.58L5 14.5L7.5 14.87L11.37 11L3.94 7.09L5.36 5.68L14.55 7.8L18.44 3.91C19 3.33 20 3.33 20.56 3.91Z" />
                </svg>
                <br />
                <svg width="200px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M9,4H15V12H19.84L12,19.84L4.16,12H9V4Z" />
                </svg>
                <br />
                <img width="200" alt="xmarksthespot" src="img/xmarksthespot.png" />
            </div>

            <EditForm Model="@this">
                <InputNumber @bind-Value="AnswA" step="0.001"></InputNumber>
                <InputNumber @bind-Value="AnswB" step="0.001"></InputNumber>
                <br />
                <br />
                <button type="submit" class="btn-primary form-btn" @onclick="CheckAnswer">Odeslat odpověď</button>
            </EditForm>
            @if (WrongAnswer)
            {
                <h2 class="wrong-answer">@WrongAnswerMessage</h2>
            }
        }
       
    </div>
}
else
{
    <div class="closed">
        <svg id="lock" viewBox="0 0 330 330">
    <g id="XMLID_509_">
	<path id="XMLID_510_" d="M65,330h200c8.284,0,15-6.716,15-15V145c0-8.284-6.716-15-15-15h-15V85c0-46.869-38.131-85-85-85
		S80,38.131,80,85v45H65c-8.284,0-15,6.716-15,15v170C50,323.284,56.716,330,65,330z M180,234.986V255c0,8.284-6.716,15-15,15
		s-15-6.716-15-15v-20.014c-6.068-4.565-10-11.824-10-19.986c0-13.785,11.215-25,25-25s25,11.215,25,25
		C190,223.162,186.068,230.421,180,234.986z M110,85c0-30.327,24.673-55,55-55s55,24.673,55,55v45H110V85z"/>
</g>
</svg>
        <h3>Puzzle B bude odemčen za: </h3>

        <h1>@Time</h1>
    </div>
    
}

@code {
    private string Time = "";
    private static System.Timers.Timer aTimer;
    private int counter = 60;

    public void StartTimer()
    {
        counter = (int)timers.PuzzleBTime.Subtract(DateTime.Now.AddHours(2)).TotalSeconds;
        aTimer = new System.Timers.Timer(1000);
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
    }

    public async void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 1;
            await InvokeAsync(() =>
            {
                Time = TimeSpan.FromSeconds(counter).ToString(@"dd\:hh\:mm\:ss");
                StateHasChanged();
            });
        }
        else
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && !timers.PuzzleBOpened)
        {
            StartTimer();
        }
    }


    //puzzle


    string text = "大同市";
    private string solution1 = "39.973";
    private string solution2 = "113.484";

    public double AnswA;
    public double AnswB;


    public string AnswAstr;
    public string AnswBstr;

    private bool Solved = false;
    private bool WrongAnswer = false;

    private int msgCounter = 0;
    private string WrongAnswerMessage = "";
    public List<string> WrongAnsMsgs = new List<string> {
        "Chyba",
        "Taky nebude ono.",
        "Ne ne",
        "Smůla",
        "Skoro! Akorát že vůbec.",
        "Bohužel ...",
        "Zkus to znovu.",
        "A znovu.",
        "A ještě.",
        "Ach jo.",
        "Ne ne ne.",
        "Budeš se muset víc zamyslet.",
         "Chyba",
        "Taky nebude ono.",
        "Ne ne",
        "Smůla",
        "Skoro! Akorát že vůbec.",
        "Bohužel ...",
        "Zkus to znovu.",
        "A znovu.",
        "A ještě.",
        "Ach jo.",
        "Ne ne ne.",
        "Budeš se muset víc zamyslet.",
        "Chceš poradit?",
        "Google prý umí dobře poradit.",
        "Google mapy umí obzvlášť dobře poradit." };


    private void CheckAnswer()
    {


        int Astrmax = 6;
        int Bstrmax = 7;
        if (AnswA.ToString().Length < Astrmax) Astrmax = AnswA.ToString().Length;
        if (AnswB.ToString().Length < Bstrmax) Bstrmax = AnswB.ToString().Length;
        AnswAstr = AnswA.ToString().Replace(",", ".").Substring(0, Astrmax);
        AnswBstr = AnswB.ToString().Replace(",", ".").Substring(0, Bstrmax);

        if (AnswAstr == solution1 && AnswBstr == solution2)
        {
            Solved = true;
        }
        else
        {
            Solved = false;
            if (msgCounter >= WrongAnsMsgs.Count) msgCounter = 0;
            WrongAnswer = true;
            WrongAnswerMessage = WrongAnsMsgs[msgCounter];
            msgCounter++;
            StateHasChanged();
        }
    }



    //puzzle piece download
    private async Task DownloadPuzzle()
    {
        string base64Content = GetFileContentAsBase64();
        await JSRuntime.InvokeVoidAsync("downloadFile", base64Content, "puzzleB.png");
    }

    private byte[] GetFileContent()
    {
        var assembly = Assembly.GetExecutingAssembly();
        var resourceName = "PandaHunt.Data.puzzleB.png"; // Replace with the correct namespace and resource name

        using (Stream resourceStream = assembly.GetManifestResourceStream(resourceName))
        {
            using (MemoryStream memoryStream = new MemoryStream())
            {
                resourceStream.CopyTo(memoryStream);
                return memoryStream.ToArray();
            }

        }
    }

    private string GetFileContentAsBase64()
    {
        byte[] fileContent = GetFileContent();
        return Convert.ToBase64String(fileContent);
    }
}
